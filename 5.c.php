<!--
5. Задачи на выбор типов данных

c. Как известно, при переводе IP-адреса компьютера в число, мы экономим ресурсы памяти, так как IP-адрес в четвертой версии — это 32-х битовое число и запись в строчном виде 192.168.1.1 
будет занимать 15 байт, а в числовом виде всего 4 байта. При этом удобной формой записи является запись в виде четырёх десятичных чисел значением от 0 до 255, разделённых точками, 
например, 192.0.2.60. но для хранения его в базе данных лучше перевести его в десятичное целое число. Например 192.168.1.1 — это одно и то же, что 3232235777.
Алгоритм перевода строковой записи IP4 в числовую такой X = Y1 * 256 ^ 0 + Y2 * 256 ^ 1 + Y3 * 256 ^ 2 + Y4 * 256 ^3 (где ip адрес имеет формат Y4.Y3.Y2.Y1) 
Написать перевести алгоритм в php-код. Пользователь программы вводит на входе $IP = ‘123.123.123.123’ или $IP = 3232235777, программа должна определить какого вида IP ввел пользователь 
и показать альтернативную запись. Для обработки адреса с “точкой” можно использовать функцию substr() - возвращает подстроку строки string длиной length, начинающегося с start символа по счету)

                        Данные для самопроверки

    Входные данные                  |           Выходные данные
$IP=2071690107 					|	123.123.123.123
$IP=3232235777					|	192.168.1.1
$IP=115.120.253.123				| 	1937309051


-->

<?php
$ip = '192.168.1.1';

if (is_numeric($ip)) {
  $y1=(int)($ip/256/256/256);
  $y2=(int)(($ip-$y1*256*256*256)/256/256);
  $y3=(int)(($ip-$y1*256*256*256-$y2*256*256)/256);
  $y4=$ip-$y1*256*256*256-$y2*256*256-$y3*256;
  $sum = $y1.'.'.$y2.'.'.$y3.'.'.$y4;
}
else {
  $a = explode(".",$ip);
  $sum = $a[0]*256**3+$a[1]*256**2+$a[2]*256**1+$a[3]*256**0;
}
 echo('ip = '.$sum);